def MOCKITO_VERSION = '2.16.0'
def MOCKITO_KOTLIN_VERSION = '1.5.0'
def JUNIT_VERSION = '4.12'
def ANDROID_TEST_VERSION = '1.0.1'
//def TOOTHPICK_VERSION = '1.1.3'

//apply plugin: 'jacoco-android'

android {

    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        test {
            java {
                exclude 'com/edf/edfetmoi/transco/broken/*.java'
            }
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java']
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        htmlOutput file("../reports/lint/lint-report.html")
        xmlOutput file("../reports/lint/lint-report.xml")

        enable 'WrongThreadInterprocedural',
                'UnusedIds',
                'UnsupportedChromeOsHardware',
                'UnpackedNativeCode',
                'UnknownNullness',
                'TypographyQuotes',
                'SyntheticAccessor',
                'StopShip',
                'SelectableText',
                'RequiredSize',
                'Registered',
                'PermissionImpliesUnsupportedChromeOsHardware',
                'NoHardKeywords',
                'NewerVersionAvailable',
                'NegativeMargin',
                'MissingRegistered',
                'MinSdkTooLow',
                'MangledCRLF',
                'LogConditional',
                'LambdaLast',
                'KotlinPropertyAccess',
                'IconExpectedSize',
                'FieldGetter',
                'EasterEgg',
                'ConvertToWebp',
                'BackButton',
                'AppLinksAutoVerifyWarning',
                'AppLinksAutoVerifyError',
                'CanvasSize',
                'IntentReset',
                'InvalidNavigation',
                'InvalidWakeLockTag',
                'MissingDefaultResource',
                'RequiresFeature',
                'Slices',
                'TranslucentOrientation',
                'ValidActionsXml',
                'Untranslatable',
                'DeletedProvider',
                'DeprecatedProvider',
                'ProxyPassword',
                'RiskyLibrary',
                'ExpiredTargetSdkVersion',
                'ExpiringTargetSdkVersion',
                'OutdatedLibrary',
                'SyntheticAccessor',
                'Autofill',
                'ConstantLocale',
                'KotlinPropertyAccess',
                'LambdaLast',
                'NoHardKeywords',
                'UnknownNullness'

        disable 'TrustAllX509TrustManager',
                'ObsoleteLintCustomCheck',
                'SyntheticAccessor', // many use case in Kotlin
                'Overdraw',
                'MissingRegistered', // Lib are not part of sourcesets for Lint
                'PluralsCandidate', // Generation is done from POEditor, case to case excetion is hard
                'UnusedIds'

        warningsAsErrors true
        lintConfig file("../config/lint/lint-config.xml")
    }
}


dependencies {
    // Android tests
//    androidTestImplementation "com.android.support.test:runner:$ANDROID_TEST_VERSION"
//    androidTestImplementation "com.android.support.test:rules:$ANDROID_TEST_VERSION"

    // Testing
//    testImplementation "com.android.support:support-annotations:$rootProject.supportVersion"
    testImplementation "junit:junit:$JUNIT_VERSION"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'

//    // Mockito Kotlin
//    testImplementation "com.nhaarman:mockito-kotlin:$MOCKITO_KOTLIN_VERSION"
//    testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
//    testImplementation "org.mockito:mockito-inline:$MOCKITO_VERSION"

    // Joda for testing Date wo context
    testImplementation 'joda-time:joda-time:2.9.9'

    // Toothpick
//    testImplementation "com.github.stephanenicolas.toothpick:toothpick-testing:$TOOTHPICK_VERSION"

    // Unit Test
    testImplementation "io.mockk:mockk:1.9.kotlin12"
    testImplementation("org.assertj:assertj-core:3.11.1")
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'com.github.dakusui:jcunit:0.8.12'
    testImplementation 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.13'

    // JSON lib for test
//    testImplementation files('./libs/org.json-20150729.jar')

    // RoboElectric
    testImplementation 'org.robolectric:robolectric:4.2'
}

//// JaCoCo settings
//jacoco {
//    toolVersion = '0.8.1'
//}

///**
// * Task to generate JaCoCo report which also takes into account kotlin code
// */
//task jacocoTestReportCompat(type: JacocoReport) {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports for Debug build"
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    // what to exclude from coverage report
//    // UI, "noise", generated classes, platform classes, etc.
//    def excludes = [
//            '**/R.class',
//            '**/R$*.class',
//            '**/*$ViewInjector*.*',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            '**/*Test*.*',
//            'android/**/*.*',
//            '**/*Fragment.*',
//            '**/*Activity.*'
//    ]
//    // generated classes
//
//    def javaTree = fileTree(dir: "$buildDir/intermediates/classes/developpement/debug", excludes: excludes)
//    def kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/developpementDebug", excludes: excludes)
//    classDirectories = files([javaTree], [kotlinTree])
//
//    sourceDirectories = files([android.sourceSets.main.java.srcDirs])
//
//    executionData = files("$buildDir/jacoco/testDeveloppementDebugUnitTest.exec")
//}
//
//// Sonar settings
//sonarqube {
//    androidVariant 'developpementDebug'
//}